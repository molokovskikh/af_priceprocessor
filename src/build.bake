import file from common.bake
import System
import System.Linq.Enumerable from System.Core
import System.IO
import System.ServiceProcess
import System.ComponentModel
import System.Security.Principal
import System.Runtime.InteropServices

[DllImport("advapi32.dll", SetLastError: true, CharSet: CharSet.Unicode)]
def LogonUser(username as String, domain as String, password as String, logonType as int, logonProvider as int, ref token as IntPtr) as bool:
	pass

[DllImport("kernel32.dll", CharSet: CharSet.Auto)]
def CloseHandle(handle as IntPtr) as bool:
	pass

Global(
	project : "PriceProcessor"
)	
	
buildTo = Path.GetFullPath("..\\build\\")
projectFile = ".\\${Globals.project}\\${Globals.project}.csproj"
host = "fms.adc.analit.net"
serviceName = "PriceProcessorService"
deployTo = "\\\\${host}\\${Globals.project}"

Task @default, [@Build]

Task @Build, [@Clean]:
	MkDir(buildTo) if not Exist(buildTo)
	MsBuild(projectFile,
			Target : "build",
			Parameters : { "OutDir" : buildTo,
						   "Configuration" : "Release|x86" },
			FrameworkVersion : "3.5").Execute()
	Rm(["${buildTo}log4net.config", "${buildTo}PriceProcessor.exe.config"])
	Cp("./PriceProcessor/app.release.config", "${buildTo}PriceProcessor.exe.config")
	
Task @Clean:
	MsBuild(projectFile,
			Target : "clean",
			Parameters : { "OutDir" : buildTo,
						   "Configuration" : "release" },
			FrameworkVersion : "3.5").Execute()
	Rm("${buildTo}*", true) if Exist(buildTo)
	
Task @deploy, [@Build]:
	Console.Write("user: ")
	user = Console.ReadLine()
	Console.Write("password: ")
	password = Console.ReadLine()

	LOGON32_PROVIDER_DEFAULT = 0;
	LOGON32_LOGON_INTERACTIVE = 2;
	tokenHandle = IntPtr.Zero;
	success = LogonUser(user, "", password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle);

	if not success:
		raise Win32Exception(Marshal.GetLastWin32Error())
	
	try:
		using WindowsIdentity.Impersonate(tokenHandle):
			services = List[of ServiceController](ServiceController.GetServices(host))
			orderProc = services.First({s| s.ServiceName == serviceName})
			orderProc.Stop()
			Cp(FileSet("*.*", BaseDirectory : buildTo), deployTo, true)
			orderProc.Start()
	ensure:
		CloseHandle(tokenHandle);