DROP TRIGGER IF EXISTS usersettings.RetClientsSetLogDelete;
CREATE DEFINER = RootDBMS@127.0.0.1 TRIGGER usersettings.RetClientsSetLogDelete AFTER DELETE ON usersettings.RetClientsSet
FOR EACH ROW BEGIN
	INSERT
	INTO `logs`.RetClientsSetLogs
	SET LogTime = now(),
		OperatorName = IFNULL(@INUser, SUBSTRING_INDEX(USER(),'@',1)),
		OperatorHost = IFNULL(@INHost, SUBSTRING_INDEX(USER(),'@',-1)),
		Operation = 2,
		ClientCode = OLD.ClientCode,
		InvisibleOnFirm = OLD.InvisibleOnFirm,
		BaseFirmCategory = OLD.BaseFirmCategory,
		OverCostPercent = OLD.OverCostPercent,
		DifferenceCalculation = OLD.DifferenceCalculation,
		AlowRejection = OLD.AlowRejection,
		MultiUserLevel = OLD.MultiUserLevel,
		ShowPriceName = OLD.ShowPriceName,
		WorkRegionMask = OLD.WorkRegionMask,
		OrderRegionMask = OLD.OrderRegionMask,
		EnableUpdate = OLD.EnableUpdate,
		CheckCopyID = OLD.CheckCopyID,
		ServiceClient = OLD.ServiceClient,
		SubmitOrders = OLD.SubmitOrders,
		AllowSubmitOrders = OLD.AllowSubmitOrders,
		BasecostPassword = OLD.BasecostPassword,
		CalculateLeader = OLD.CalculateLeader,
		SmartOrderRuleId = OLD.SmartOrderRuleId,
		FirmCodeOnly = OLD.FirmCodeOnly,
		MaxWeeklyOrdersSum = OLD.MaxWeeklyOrdersSum,
		CheckWeeklyOrdersSum = OLD.CheckWeeklyOrdersSum,
		AllowDelayOfPayment = OLD.AllowDelayOfPayment,
		Spy = OLD.Spy,
		SpyAccount = OLD.SpyAccount,
		SendRetailMarkup = OLD.SendRetailMarkup,
		ShowAdvertising = OLD.ShowAdvertising,
		IgnoreNewPrices = OLD.IgnoreNewPrices,
		SendWaybillsFromClient = OLD.SendWaybillsFromClient,
		OnlyParseWaybills = OLD.OnlyParseWaybills,
		UpdateToTestBuild = OLD.UpdateToTestBuild,
		EnableSmartOrder = OLD.EnableSmartOrder,
		BuyingMatrixPriceId = OLD.BuyingMatrixPriceId,
		BuyingMatrixType = OLD.BuyingMatrixType,
		WarningOnBuyingMatrix = OLD.WarningOnBuyingMatrix,
		EnableImpersonalPrice = OLD.EnableImpersonalPrice,
		NetworkSupplierId = OLD.NetworkSupplierId,
		NoiseCosts = OLD.NoiseCosts,
		NoiseCostExceptSupplierId = OLD.NoiseCostExceptSupplierId,
		NetworkPriceId = OLD.NetworkPriceId,
		IsConvertFormat = OLD.IsConvertFormat,
		AssortimentPriceId = OLD.AssortimentPriceId,
		OfferMatrixPriceId = OLD.OfferMatrixPriceId,
		OfferMatrixType = OLD.OfferMatrixType,
		IgnoreNewPriceForUser = OLD.IgnoreNewPriceForUser,
		AllowAnalitFSchedule = OLD.AllowAnalitFSchedule,
		ShowCertificatesWithoutRefSupplier = OLD.ShowCertificatesWithoutRefSupplier,
		ProtekWaybillSavingType = OLD.ProtekWaybillSavingType,
		ShowNewDefecture = OLD.ShowNewDefecture,
		ManualComparison = OLD.ManualComparison,
		ExcessAvgOrderTimes = OLD.ExcessAvgOrderTimes,
		WaybillConvertFormat = OLD.WaybillConvertFormat,
		DebugOrders = OLD.DebugOrders,
		BuyingMatrixAction = OLD.BuyingMatrixAction,
		OfferMatrixAction = OLD.OfferMatrixAction,
		BuyingMatrix = OLD.BuyingMatrix,
		OfferMatrix = OLD.OfferMatrix;
END;

DROP TRIGGER IF EXISTS usersettings.RetClientsSetLogUpdate;
CREATE DEFINER = RootDBMS@127.0.0.1 TRIGGER usersettings.RetClientsSetLogUpdate AFTER UPDATE ON usersettings.RetClientsSet
FOR EACH ROW BEGIN
	INSERT
	INTO `logs`.RetClientsSetLogs
	SET LogTime = now(),
		OperatorName = IFNULL(@INUser, SUBSTRING_INDEX(USER(),'@',1)),
		OperatorHost = IFNULL(@INHost, SUBSTRING_INDEX(USER(),'@',-1)),
		Operation = 1,
		ClientCode = OLD.ClientCode,
		InvisibleOnFirm = NULLIF(NEW.InvisibleOnFirm, OLD.InvisibleOnFirm),
		BaseFirmCategory = NULLIF(NEW.BaseFirmCategory, OLD.BaseFirmCategory),
		OverCostPercent = NULLIF(NEW.OverCostPercent, OLD.OverCostPercent),
		DifferenceCalculation = NULLIF(NEW.DifferenceCalculation, OLD.DifferenceCalculation),
		AlowRejection = NULLIF(NEW.AlowRejection, OLD.AlowRejection),
		MultiUserLevel = NULLIF(NEW.MultiUserLevel, OLD.MultiUserLevel),
		ShowPriceName = NULLIF(NEW.ShowPriceName, OLD.ShowPriceName),
		WorkRegionMask = NULLIF(NEW.WorkRegionMask, OLD.WorkRegionMask),
		OrderRegionMask = NULLIF(NEW.OrderRegionMask, OLD.OrderRegionMask),
		EnableUpdate = NULLIF(NEW.EnableUpdate, OLD.EnableUpdate),
		CheckCopyID = NULLIF(NEW.CheckCopyID, OLD.CheckCopyID),
		ServiceClient = NULLIF(NEW.ServiceClient, OLD.ServiceClient),
		SubmitOrders = NULLIF(NEW.SubmitOrders, OLD.SubmitOrders),
		AllowSubmitOrders = NULLIF(NEW.AllowSubmitOrders, OLD.AllowSubmitOrders),
		BasecostPassword = NULLIF(NEW.BasecostPassword, OLD.BasecostPassword),
		CalculateLeader = NULLIF(NEW.CalculateLeader, OLD.CalculateLeader),
		SmartOrderRuleId = NULLIF(NEW.SmartOrderRuleId, OLD.SmartOrderRuleId),
		FirmCodeOnly = NULLIF(NEW.FirmCodeOnly, OLD.FirmCodeOnly),
		MaxWeeklyOrdersSum = NULLIF(NEW.MaxWeeklyOrdersSum, OLD.MaxWeeklyOrdersSum),
		CheckWeeklyOrdersSum = NULLIF(NEW.CheckWeeklyOrdersSum, OLD.CheckWeeklyOrdersSum),
		AllowDelayOfPayment = NULLIF(NEW.AllowDelayOfPayment, OLD.AllowDelayOfPayment),
		Spy = NULLIF(NEW.Spy, OLD.Spy),
		SpyAccount = NULLIF(NEW.SpyAccount, OLD.SpyAccount),
		SendRetailMarkup = NULLIF(NEW.SendRetailMarkup, OLD.SendRetailMarkup),
		ShowAdvertising = NULLIF(NEW.ShowAdvertising, OLD.ShowAdvertising),
		IgnoreNewPrices = NULLIF(NEW.IgnoreNewPrices, OLD.IgnoreNewPrices),
		SendWaybillsFromClient = NULLIF(NEW.SendWaybillsFromClient, OLD.SendWaybillsFromClient),
		OnlyParseWaybills = NULLIF(NEW.OnlyParseWaybills, OLD.OnlyParseWaybills),
		UpdateToTestBuild = NULLIF(NEW.UpdateToTestBuild, OLD.UpdateToTestBuild),
		EnableSmartOrder = NULLIF(NEW.EnableSmartOrder, OLD.EnableSmartOrder),
		BuyingMatrixPriceId = NULLIF(NEW.BuyingMatrixPriceId, OLD.BuyingMatrixPriceId),
		BuyingMatrixType = NULLIF(NEW.BuyingMatrixType, OLD.BuyingMatrixType),
		WarningOnBuyingMatrix = NULLIF(NEW.WarningOnBuyingMatrix, OLD.WarningOnBuyingMatrix),
		EnableImpersonalPrice = NULLIF(NEW.EnableImpersonalPrice, OLD.EnableImpersonalPrice),
		NetworkSupplierId = NULLIF(NEW.NetworkSupplierId, OLD.NetworkSupplierId),
		NoiseCosts = NULLIF(NEW.NoiseCosts, OLD.NoiseCosts),
		NoiseCostExceptSupplierId = NULLIF(NEW.NoiseCostExceptSupplierId, OLD.NoiseCostExceptSupplierId),
		NetworkPriceId = NULLIF(NEW.NetworkPriceId, OLD.NetworkPriceId),
		IsConvertFormat = NULLIF(NEW.IsConvertFormat, OLD.IsConvertFormat),
		AssortimentPriceId = NULLIF(NEW.AssortimentPriceId, OLD.AssortimentPriceId),
		OfferMatrixPriceId = NULLIF(NEW.OfferMatrixPriceId, OLD.OfferMatrixPriceId),
		OfferMatrixType = NULLIF(NEW.OfferMatrixType, OLD.OfferMatrixType),
		IgnoreNewPriceForUser = NULLIF(NEW.IgnoreNewPriceForUser, OLD.IgnoreNewPriceForUser),
		AllowAnalitFSchedule = NULLIF(NEW.AllowAnalitFSchedule, OLD.AllowAnalitFSchedule),
		ShowCertificatesWithoutRefSupplier = NULLIF(NEW.ShowCertificatesWithoutRefSupplier, OLD.ShowCertificatesWithoutRefSupplier),
		ProtekWaybillSavingType = NULLIF(NEW.ProtekWaybillSavingType, OLD.ProtekWaybillSavingType),
		ShowNewDefecture = NULLIF(NEW.ShowNewDefecture, OLD.ShowNewDefecture),
		ManualComparison = NULLIF(NEW.ManualComparison, OLD.ManualComparison),
		ExcessAvgOrderTimes = NULLIF(NEW.ExcessAvgOrderTimes, OLD.ExcessAvgOrderTimes),
		WaybillConvertFormat = NULLIF(NEW.WaybillConvertFormat, OLD.WaybillConvertFormat),
		DebugOrders = NULLIF(NEW.DebugOrders, OLD.DebugOrders),
		BuyingMatrixAction = NULLIF(NEW.BuyingMatrixAction, OLD.BuyingMatrixAction),
		OfferMatrixAction = NULLIF(NEW.OfferMatrixAction, OLD.OfferMatrixAction),
		BuyingMatrix = NULLIF(NEW.BuyingMatrix, OLD.BuyingMatrix),
		OfferMatrix = NULLIF(NEW.OfferMatrix, OLD.OfferMatrix);
END;

DROP TRIGGER IF EXISTS usersettings.RetClientsSetLogInsert;
CREATE DEFINER = RootDBMS@127.0.0.1 TRIGGER usersettings.RetClientsSetLogInsert AFTER INSERT ON usersettings.RetClientsSet
FOR EACH ROW BEGIN
	INSERT
	INTO `logs`.RetClientsSetLogs
	SET LogTime = now(),
		OperatorName = IFNULL(@INUser, SUBSTRING_INDEX(USER(),'@',1)),
		OperatorHost = IFNULL(@INHost, SUBSTRING_INDEX(USER(),'@',-1)),
		Operation = 0,
		ClientCode = NEW.ClientCode,
		InvisibleOnFirm = NEW.InvisibleOnFirm,
		BaseFirmCategory = NEW.BaseFirmCategory,
		OverCostPercent = NEW.OverCostPercent,
		DifferenceCalculation = NEW.DifferenceCalculation,
		AlowRejection = NEW.AlowRejection,
		MultiUserLevel = NEW.MultiUserLevel,
		ShowPriceName = NEW.ShowPriceName,
		WorkRegionMask = NEW.WorkRegionMask,
		OrderRegionMask = NEW.OrderRegionMask,
		EnableUpdate = NEW.EnableUpdate,
		CheckCopyID = NEW.CheckCopyID,
		ServiceClient = NEW.ServiceClient,
		SubmitOrders = NEW.SubmitOrders,
		AllowSubmitOrders = NEW.AllowSubmitOrders,
		BasecostPassword = NEW.BasecostPassword,
		CalculateLeader = NEW.CalculateLeader,
		SmartOrderRuleId = NEW.SmartOrderRuleId,
		FirmCodeOnly = NEW.FirmCodeOnly,
		MaxWeeklyOrdersSum = NEW.MaxWeeklyOrdersSum,
		CheckWeeklyOrdersSum = NEW.CheckWeeklyOrdersSum,
		AllowDelayOfPayment = NEW.AllowDelayOfPayment,
		Spy = NEW.Spy,
		SpyAccount = NEW.SpyAccount,
		SendRetailMarkup = NEW.SendRetailMarkup,
		ShowAdvertising = NEW.ShowAdvertising,
		IgnoreNewPrices = NEW.IgnoreNewPrices,
		SendWaybillsFromClient = NEW.SendWaybillsFromClient,
		OnlyParseWaybills = NEW.OnlyParseWaybills,
		UpdateToTestBuild = NEW.UpdateToTestBuild,
		EnableSmartOrder = NEW.EnableSmartOrder,
		BuyingMatrixPriceId = NEW.BuyingMatrixPriceId,
		BuyingMatrixType = NEW.BuyingMatrixType,
		WarningOnBuyingMatrix = NEW.WarningOnBuyingMatrix,
		EnableImpersonalPrice = NEW.EnableImpersonalPrice,
		NetworkSupplierId = NEW.NetworkSupplierId,
		NoiseCosts = NEW.NoiseCosts,
		NoiseCostExceptSupplierId = NEW.NoiseCostExceptSupplierId,
		NetworkPriceId = NEW.NetworkPriceId,
		IsConvertFormat = NEW.IsConvertFormat,
		AssortimentPriceId = NEW.AssortimentPriceId,
		OfferMatrixPriceId = NEW.OfferMatrixPriceId,
		OfferMatrixType = NEW.OfferMatrixType,
		IgnoreNewPriceForUser = NEW.IgnoreNewPriceForUser,
		AllowAnalitFSchedule = NEW.AllowAnalitFSchedule,
		ShowCertificatesWithoutRefSupplier = NEW.ShowCertificatesWithoutRefSupplier,
		ProtekWaybillSavingType = NEW.ProtekWaybillSavingType,
		ShowNewDefecture = NEW.ShowNewDefecture,
		ManualComparison = NEW.ManualComparison,
		ExcessAvgOrderTimes = NEW.ExcessAvgOrderTimes,
		WaybillConvertFormat = NEW.WaybillConvertFormat,
		DebugOrders = NEW.DebugOrders,
		BuyingMatrixAction = NEW.BuyingMatrixAction,
		OfferMatrixAction = NEW.OfferMatrixAction,
		BuyingMatrix = NEW.BuyingMatrix,
		OfferMatrix = NEW.OfferMatrix;
END;