import System
import System.Linq.Enumerable
import System.ServiceModel
import System.IO
import System.Xml
import System.Xml.Linq
import System.Xml.XPath.Extensions

[ServiceContract]
interface IWaybillService:
	[OperationContract]
	def ParseWaybill(uints as (uint)) as (uint)


Global(
	Project: "PriceProcessor",
	Server: "processor.adc.analit.net",
	HumanReadableName: "Служба обработки прайс-листов",
	Profile: @catalog,
	NugetPackageName: @RemotePriceProcessor,
	DeployTo: """\\processor.adc.analit.net\apps\priceprocessor\bin\"""
)

#если мы запускаем тесты на сервере не надо загружать проект что бы
#не блокировать библиотеки
task @ready:
	unless Configuration.IsDefined(@notInteractive):
		Engine.Execute("LoadProject")

desc """
вызывает удаленный сервис priceprocessor для разбора накладных
параметры
	dataFile - иммя файла где каждая строка идентификатор из logs.document_logs
	id - идентификатор из  logs.document_logs
"""
task @ParseWaybills:
	binding = NetTcpBinding()
	binding.SendTimeout = TimeSpan.FromMinutes(30)
	binding.OpenTimeout = TimeSpan.FromMinutes(30)
	binding.ReceiveTimeout = TimeSpan.FromMinutes(30)
	binding.Security.Mode = SecurityMode.None
	factory = ChannelFactory[of IWaybillService](binding, "net.tcp://${Globals.Server}:901/WaybillService")
	channel = factory.CreateChannel()
	ids = List[of uint]()
	dataFile = Configuration.Maybe.dataFile
	if dataFile:
		for l in File.ReadAllLines(dataFile.ToString()):
			ids.Add(uint.Parse(l.Trim()))

	if Configuration.Maybe.id:
		ids.Add(Convert.ToUInt32(Configuration.Id))

	results = channel.ParseWaybill(ids.ToArray())
	for result in results:
		print result

task @default, [@Build]

task @Build, [@BuildService]

task @deploy, [@ServiceDeployPipeline]

desc """
обновиляет интерфейс для сервиса протек

у протека свое представление о прекрасном
для опциональных полей они ставят minOccurs=0 что заставляет .net
генерировать безумную обертку
сначала правим wsdl а затем генерирум классы
"""
task "update:wsdl":
	doc = XDocument.Load("http://wjzakaz.protek.ru:20080/axis2/services/EzakazWebService?wsdl")
	for element in doc.Descendants().Where({e| e.Name.LocalName == @element}):
		attr = element.Attribute("minOccurs")
		continue unless attr
		if attr.Value == "0":
			attr.Value = "1"
			element.SetAttributeValue("nillable", "true")
	doc.Save(@wsdl)
	Sh("SvcUtil.exe /nologo /noconfig /targetClientVersion:Version35 wsdl /directory:src/PriceProcessor/Generated")
	Rm(@wsdl)
	name = "src/PriceProcessor/Generated/EzakazWebService.cs"
	print """sed -ri 's/, Order=[0-9]+//' $name"""
	Bash("""sed -ri 's/, Order=[0-9]+//' $name""")
	Bash("""unix2dos $name""")
	Bash("""clean.sh $name""")
